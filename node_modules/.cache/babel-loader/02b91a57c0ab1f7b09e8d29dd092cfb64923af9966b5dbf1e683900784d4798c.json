{"ast":null,"code":"var _jsxFileName = \"/Users/tejas/frontend/src/components/StatutePredictionPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../index.css';\nimport '../modules.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StatutePredictionPage = () => {\n  _s();\n  const [textInput, setTextInput] = useState('');\n  const [sections, setSections] = useState([]); // Store all sections\n  const [currentSectionIndex, setCurrentSectionIndex] = useState(0); // Track the current section\n  const [isLoading, setIsLoading] = useState(false); // Loading state\n\n  const handleTextChange = e => {\n    setTextInput(e.target.value);\n  };\n  const handleProcess = async () => {\n    setIsLoading(true); // Start loading\n    try {\n      const response = await fetch('/statute', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded' // Sending form data\n        },\n        body: new URLSearchParams({\n          inputData: textInput\n        }) // Send textInput as form data\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(data); // Log response data\n\n        // Assuming the response contains a `predictedSections` field\n        if (data && data.predictedSections) {\n          setSections(data.predictedSections); // Set all sections\n          setCurrentSectionIndex(0); // Reset to the first section\n        } else {\n          setSections([{\n            section: 'Error',\n            text: 'No sections predicted.'\n          }]);\n        }\n      } else {\n        setSections([{\n          section: 'Error',\n          text: 'Unable to fetch predicted statutes.'\n        }]);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setSections([{\n        section: 'Error',\n        text: 'Unable to fetch predicted statutes.'\n      }]);\n    } finally {\n      setIsLoading(false); // Stop loading\n    }\n  };\n  const handleNext = () => {\n    setCurrentSectionIndex(prevIndex => Math.min(prevIndex + 1, sections.length - 1));\n  };\n  const handlePrevious = () => {\n    setCurrentSectionIndex(prevIndex => Math.max(prevIndex - 1, 0));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Statute Prediction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"instructions\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Enter or paste your document text to predict relevant statutes.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: textInput,\n        onChange: handleTextChange,\n        placeholder: \"Enter document text here...\",\n        className: \"text-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleProcess,\n        className: \"process-button\",\n        disabled: isLoading // Disable button while loading\n        ,\n        children: isLoading ? 'Processing...' : 'Predict Statutes'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), sections.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"output-title\",\n          children: sections[currentSectionIndex].section\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"output-text\",\n          children: sections[currentSectionIndex].text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pagination-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handlePrevious,\n            className: \"nav-button\",\n            disabled: currentSectionIndex === 0,\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNext,\n            className: \"nav-button\",\n            disabled: currentSectionIndex === sections.length - 1,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(StatutePredictionPage, \"5Ybp3y5wje6lLh3lvcCxzUuUcDM=\");\n_c = StatutePredictionPage;\nexport default StatutePredictionPage;\nvar _c;\n$RefreshReg$(_c, \"StatutePredictionPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","StatutePredictionPage","_s","textInput","setTextInput","sections","setSections","currentSectionIndex","setCurrentSectionIndex","isLoading","setIsLoading","handleTextChange","e","target","value","handleProcess","response","fetch","method","headers","body","URLSearchParams","inputData","ok","data","json","console","log","predictedSections","section","text","error","handleNext","prevIndex","Math","min","length","handlePrevious","max","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/tejas/frontend/src/components/StatutePredictionPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../index.css';\nimport '../modules.css';\n\nconst StatutePredictionPage = () => {\n  const [textInput, setTextInput] = useState('');\n  const [sections, setSections] = useState([]); // Store all sections\n  const [currentSectionIndex, setCurrentSectionIndex] = useState(0); // Track the current section\n  const [isLoading, setIsLoading] = useState(false); // Loading state\n\n  const handleTextChange = (e) => {\n    setTextInput(e.target.value);\n  };\n\n  const handleProcess = async () => {\n    setIsLoading(true); // Start loading\n    try {\n      const response = await fetch('/statute', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded', // Sending form data\n        },\n        body: new URLSearchParams({ inputData: textInput }), // Send textInput as form data\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log(data); // Log response data\n\n        // Assuming the response contains a `predictedSections` field\n        if (data && data.predictedSections) {\n          setSections(data.predictedSections); // Set all sections\n          setCurrentSectionIndex(0); // Reset to the first section\n        } else {\n          setSections([{ section: 'Error', text: 'No sections predicted.' }]);\n        }\n      } else {\n        setSections([{ section: 'Error', text: 'Unable to fetch predicted statutes.' }]);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setSections([{ section: 'Error', text: 'Unable to fetch predicted statutes.' }]);\n    } finally {\n      setIsLoading(false); // Stop loading\n    }\n  };\n\n  const handleNext = () => {\n    setCurrentSectionIndex((prevIndex) => Math.min(prevIndex + 1, sections.length - 1));\n  };\n\n  const handlePrevious = () => {\n    setCurrentSectionIndex((prevIndex) => Math.max(prevIndex - 1, 0));\n  };\n\n  return (\n    <div className=\"page-container\">\n      <div className=\"content-container\">\n        <h1 className=\"title\">Statute Prediction</h1>\n        <div className=\"instructions\">\n          <p>Enter or paste your document text to predict relevant statutes.</p>\n        </div>\n        <textarea\n          value={textInput}\n          onChange={handleTextChange}\n          placeholder=\"Enter document text here...\"\n          className=\"text-input\"\n        />\n        <button\n          onClick={handleProcess}\n          className=\"process-button\"\n          disabled={isLoading} // Disable button while loading\n        >\n          {isLoading ? 'Processing...' : 'Predict Statutes'}\n        </button>\n        {sections.length > 0 && (\n          <div className=\"output-container\">\n            <h3 className=\"output-title\">{sections[currentSectionIndex].section}</h3>\n            <p className=\"output-text\">{sections[currentSectionIndex].text}</p>\n\n            {/* Pagination Buttons */}\n            <div className=\"pagination-buttons\">\n              <button\n                onClick={handlePrevious}\n                className=\"nav-button\"\n                disabled={currentSectionIndex === 0}\n              >\n                Previous\n              </button>\n              <button\n                onClick={handleNext}\n                className=\"nav-button\"\n                disabled={currentSectionIndex === sections.length - 1}\n              >\n                Next\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default StatutePredictionPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}