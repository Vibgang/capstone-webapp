{"ast":null,"code":"var _jsxFileName = \"/Users/tejas/frontend/src/components/StatutePredictionPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../index.css';\nimport '../modules.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StatutePredictionPage = () => {\n  _s();\n  const [textInput, setTextInput] = useState('');\n  const [output, setOutput] = useState(null); // Store the sections and texts\n  const [isLoading, setIsLoading] = useState(false); // Loading state\n\n  const handleTextChange = e => {\n    setTextInput(e.target.value);\n  };\n  const handleProcess = async () => {\n    setIsLoading(true); // Start loading\n    try {\n      const response = await fetch('http://localhost:5000/statute', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded' // Sending form data\n        },\n        body: new URLSearchParams({\n          inputData: textInput\n        }) // Send textInput as form data\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(data); // Log response data\n\n        // Assuming the response contains a `predictedSections` field\n        if (data && data.predictedSections) {\n          setOutput(data.predictedSections.map((section, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"section-output\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"section-title\",\n              children: section.section\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"section-text\",\n              children: section.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this)));\n        } else {\n          setOutput('No sections predicted.');\n        }\n      } else {\n        setOutput('Error: Unable to fetch predicted statutes.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setOutput('Error: Unable to fetch predicted statutes.');\n    } finally {\n      setIsLoading(false); // Stop loading\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Statute Prediction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"instructions\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Enter or paste your document text to predict relevant statutes.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: textInput,\n        onChange: handleTextChange,\n        placeholder: \"Enter document text here...\",\n        className: \"text-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleProcess,\n        className: \"process-button\",\n        disabled: isLoading // Disable button while loading\n        ,\n        children: isLoading ? 'Processing...' : 'Predict Statutes'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), output && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"output-title\",\n          children: \"Output:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), output]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(StatutePredictionPage, \"r5TOjuzC3W+d4Ujl9IthslZJYhs=\");\n_c = StatutePredictionPage;\nexport default StatutePredictionPage;\nvar _c;\n$RefreshReg$(_c, \"StatutePredictionPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","StatutePredictionPage","_s","textInput","setTextInput","output","setOutput","isLoading","setIsLoading","handleTextChange","e","target","value","handleProcess","response","fetch","method","headers","body","URLSearchParams","inputData","ok","data","json","console","log","predictedSections","map","section","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","text","error","onChange","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/tejas/frontend/src/components/StatutePredictionPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../index.css';\nimport '../modules.css';\n\nconst StatutePredictionPage = () => {\n  const [textInput, setTextInput] = useState('');\n  const [output, setOutput] = useState(null); // Store the sections and texts\n  const [isLoading, setIsLoading] = useState(false); // Loading state\n\n  const handleTextChange = (e) => {\n    setTextInput(e.target.value);\n  };\n\n  const handleProcess = async () => {\n    setIsLoading(true); // Start loading\n    try {\n      const response = await fetch('http://localhost:5000/statute', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded', // Sending form data\n        },\n        body: new URLSearchParams({ inputData: textInput }), // Send textInput as form data\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log(data); // Log response data\n\n        // Assuming the response contains a `predictedSections` field\n        if (data && data.predictedSections) {\n          setOutput(\n            data.predictedSections.map((section, index) => (\n              <div key={index} className=\"section-output\">\n                <h3 className=\"section-title\">{section.section}</h3>\n                <p className=\"section-text\">{section.text}</p>\n              </div>\n            ))\n          );\n        } else {\n          setOutput('No sections predicted.');\n        }\n      } else {\n        setOutput('Error: Unable to fetch predicted statutes.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setOutput('Error: Unable to fetch predicted statutes.');\n    } finally {\n      setIsLoading(false); // Stop loading\n    }\n  };\n\n  return (\n    <div className=\"page-container\">\n      <div className=\"content-container\">\n        <h1 className=\"title\">Statute Prediction</h1>\n        <div className=\"instructions\">\n          <p>Enter or paste your document text to predict relevant statutes.</p>\n        </div>\n        <textarea\n          value={textInput}\n          onChange={handleTextChange}\n          placeholder=\"Enter document text here...\"\n          className=\"text-input\"\n        />\n        <button\n          onClick={handleProcess}\n          className=\"process-button\"\n          disabled={isLoading} // Disable button while loading\n        >\n          {isLoading ? 'Processing...' : 'Predict Statutes'}\n        </button>\n        {output && (\n          <div className=\"output-container\">\n            <h2 className=\"output-title\">Output:</h2>\n            {output}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default StatutePredictionPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}